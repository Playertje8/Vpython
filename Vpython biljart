Web VPython 3.2

from visual import *


# game_starter.  
#
# Een interactie met 3D graphics bouwen met Python
#   Documentatie: https://www.glowscript.org/docs/VPythonDocs/index.html
#   Voorbeelden:  https://www.glowscript.org/#/user/GlowScriptDemos/folder/Examples/
#

 

scene.bind('keydown', keydown_fun)        # Functie voor toetsaanslagen
scene.bind('click', click_fun)            # Functie voor muiskliks
scene.background = 0.8 * vector(1, 1, 1)  # Lichtgrijs (0.8 van 1.0)
scene.width = 640                         # Maak het 3D-scherm groter
scene.height = 480


# +++ Begin van het AANMAKEN van OBJECTEN
# Deze functies maken "container"-objecten, ofwel "compounds"


def make_alien(starting_position, starting_vel=vector(0, 0, 0)):
    """The lines below make a new "frame", which is a container with a
       local coordinate system.
       The arguments to make_alien allow for any initial starting position
       and initial starting velocity, with a default starting velocity
       of vector(0, 0, 0).

       Compounds can have any number of components.  Here are the
       alien's components:
    """
    alien_body = sphere(size=1.0 * vector(1, 1, 1), pos=vector(0, 0, 0), color=color.yellow)
    alien_eye1 = sphere(size=0.3 * vector(1, 1, 1), pos=.42 * vector(.7, .5, .2), color=color.white)
    alien_eye2 = sphere(size=0.3 * vector(1, 1, 1), pos=.42 * vector(.2, .5, .7), color=color.white)
    alien_hat = cylinder(pos=0.42 * vector(0, .9, -.2), axis=vector(.02, .2, -.02), size=vector(0.2, 0.7, 0.7), color=color.cyan)
    alien_objects = [alien_body, alien_eye1, alien_eye2, alien_hat]  # maak een lijst die we "aan elkaar plakken" met een compound
    # we gaan nu een compound maken -- we noemen hem com_alien:
    com_alien = compound(alien_objects, pos=starting_position)
    com_alien.vel = starting_vel   # stel de beginsnelheid in
    return com_alien

# We maken de grond door middel van een box (VPython's rechthoekige vorm)
# https://www.glowscript.org/docs/VPythonDocs/box.html
ground = box(size=vector(20, 1, 20), pos=vector(0, -1, 0), color=.4*vector(1, 0, 1))

# We maken twee muren, ook met een box
wall_a = box(pos=vector(0, 0, -10), axis=vector(1, 0, 0), size=vector(20, 3, .2), color=color.purple)  # geel
wall_b = box(pos=vector(-10, 0, 0), axis=vector(0, 0, 1), size=vector(20, 2, .2), color=color.purple)   # blauw
wall_c = box(pos=vector(10, 0, 0), axis=vector(0, 0, 1), size=vector(20, 2, .2), color=color.purple)  #rood
wall_d = box(pos=vector(0, 0, 10), axis=vector(1, 0, 0), size=vector(20, 2, .2), color=color.purple) #groen


wall_sk = box(pos=vector(3, 0, -3), axis=vector(1, 0, 1), size=vector(8, 2, .5), color=vector(0.4, 1.0, 1.5))  # light blue
wall_ks = box(pos=vector(-3, 0, 3), axis=vector(1, 0, 1), size=vector(3, 2, .5), color=vector(0.4, 1.0, 1.5))  # light blue

goal_topl = ring(pos=vector(-9,0.5,-9), axis=vector(0,1,0), radius=0.75, thickness=0.15, color=color.red)
goal_topll = ring(pos=vector(-8.5,1.5,-8.5), axis=vector(0,1,0), radius=0.75, thickness=0.15, color=color.red)
goal_toplll = ring(pos=vector(-8.5,2.5,-8.5), axis=vector(0,1,0), radius=0.75, thickness=0.15, color=color.red)
goal_topllll = ring(pos=vector(-8.5,3.5,-8.5), axis=vector(0,1,0), radius=0.75, thickness=0.15, color=color.red)


goal_bottomr = ring(pos=vector(9,0.5,9), axis=vector(0,1,0), radius=0.75, thickness=0.15, color=color.blue)
goal_bottomrr = ring(pos=vector(8.5,1.5,8.5), axis=vector(0,1,0), radius=0.75, thickness=0.15, color=color.blue)
goal_bottomrrr = ring(pos=vector(8.5,2.5,8.5), axis=vector(0,1,0), radius=0.75, thickness=0.15, color=color.blue)
goal_bottomrrrr = ring(pos=vector(8.5,3.5,8.5), axis=vector(0,1,0), radius=0.75, thickness=0.15, color=color.blue)


end_goal = ring(pos=vector(5,3,5), axis=vector(0,1,0), radius=0.75, thickness=0.15, color=color.green, opacity=0)

goals = [goal_topl, goal_bottomr]
balls = [ball, boef, boef2, joker, alien, alien2, joker2]

# Een bal die we kunnen besturen
ball = sphere(make_trail=True, trail_type="points", retain=50, size=1.0*vector(1, 1, 1), color=vector(0.8, 0.5, 1.5))   # ball is een object van de klasse sphere
ball.vel = vector(0, 0, 0)    # dit is de beginsnelheid


boef = sphere(size=1.0*vector(1.2, 1.2, 1.2), color=color.red, pos=vector(5, 0, 0))  # boef is een object van de klasse sphere
boef.vel = vector(0, 0, -2)

boef2 = sphere(size=1.0*vector(1.2, 1.2, 1.2), color=color.red, pos=vector(1, 0, 5))  # boef2 is een object van de klasse sphere
boef2.vel = vector(0.5, 0, -2)

joker = sphere(size=1.0*vector(1, 1, 1), color=vector(0, 0, 0), pos=vector(7, 0, -7))  # Joker is een object van de klasse sphere
joker.vel = vector(0, 0, -3.5)

joker2 = sphere(size=1.0*vector(1, 1, 1), color=vector(0, 0, 0), pos=vector(2, 0, -1))  # Joker is een object van de klasse sphere
joker2.vel = vector(0, 0, -3.5)

# We maken twee aliens met twee aanroepen naar de functie make_alien (hierboven)
alien = make_alien(starting_position=vector(6, 0, 6), starting_vel=vector(0, 0, -1))
alien2 = make_alien(starting_position=vector(1, 0, -6), starting_vel=vector(0, 0, -2))   


header = text
spring = helix(pos=vector(-10, 3, -10), axis=vector(5,0,0), radius=0.4, color=color.purple, size=vector(20, 2.5, .2))
springB = helix(pos=vector(-10, 3, -10), axis=vector(0,0,5), radius=0.4, color=color.purple, size=vector(20, 2.5, .2))
springC = helix(pos=vector(10, 3, -10), axis=vector(0,0,5), radius=0.4, color=color.purple, size=vector(20, 2.5, .2))
springD = helix(pos=vector(-10, 3, 10), axis=vector(5,0,0), radius=0.4, color=color.purple, size=vector(20, 2.5, .2))

sphere_list = [ball, boef, boef2. alien, alien2, joker, joker2]

# +++ Eind van het AANMAKEN van OBJECTEN

# +++ Begin van de ANIMATIE

# Andere constanten
RATE = 30                # Het aantal keer dat de while-lus per seconde wordt uitgevoerd
dt = 1.0/RATE            # De tijdstap per keer dat de while-lus wordt uitgevoerd
scene.autoscale = False  # Voorkomen dat het beeld automatisch wordt aangepast
scene.forward = vector(0, -3, -2)  # De scene vanuit de lucht wordt bekeken...

# Dit is de "event loop" ("gebeurtenissenlus") of "animatielus"

# Elke keer dat deze lus uitgevoerd wordt beweegt alles één tijdstap van dt seconden

run = True


while run:

    rate(RATE)   # Maximaal aantal keer per seconden dat de while-lus uitgevoerd wordt

    # +++ Begin van het UITVOEREN van de PHYSICS -- werk alle posities elke tijdstap bij
    alien.pos = alien.pos + alien.vel*dt   # Werk de positie van de alien bij
    ball.pos = ball.pos + ball.vel*dt      # Werk de positie van de bal bij
    boef.pos = boef.pos + boef.vel*dt      # Werk de positie van de boef bij
    alien2.pos = alien2.pos + alien2.vel*dt # Werk de positie van de Alien2 bij
    boef2.pos = boef2.pos + boef2.vel*dt   # Werk de positie van de boef2 bij
    joker.pos = joker.pos + joker.vel*dt   # Werk de positie van de Joker bij
    joker2.pos = joker2.pos + joker2.vel*dt
    
    collided = spheres_collide(ball, joker, boef2, alien, alien2)  # controleer of de bollen botsen!
    if collided:
        print("Botsing! (collided == True)")

    # +++ Eind van het UITVOEREN van de PHYSICS -- zorg dat alle objecten goed zijn bijgewerkt!


    # +++ Begin van BOTSINGEN -- zorg voor botsingen & doe het "goede"

    
    for obj in [ball, joker, joker2, boef, boef2, alien, alien2]:
        arena_collide(obj)  # regelt alle botsingen met de omgeving
        wall_collide(wall_sk, obj)
        wall_collide(wall_ks, obj)

    spheres_collide(ball, alien)
    
    spheres_collide(ball, alien2)
    
    spheres_collide(boef, joker)
    
    spheres_collide(alien, joker)
    
    spheres_collide(boef2, joker)
    
    spheres_collide(alien2, joker)
    
    spheres_collide(boef, boef2)
    
    spheres_collide(boef, alien)
    
    spheres_collide(boef, alien2)
    
    spheres_collide(boef, joker2)
    
    spheres_collide(ball, joker2)
    
    spheres_collide(alien, joker2) 
    
    spheres_collide(alien2, joker2)
 

    
    arena_collide(alien2)
    """Arena collisions!
       boef must have a .vel field and a .pos field.
    """
    arena_collide(joker)
    """Arena collisions!
       boef must have a .vel field and a .pos field.
    """
    
    arena_collide(boef)
    """Arena collisions!
       boef must have a .vel field and a .pos field.
    """
    arena_collide(boef2)
    """Arena collisions!
       boef must have a .vel field and a .pos field.
    """
    
    
    arena_collide(alien)
    """Arena collisions!
       Alien must have a .vel field and a .pos field.
    """
    
    
    arena_collide(ball)
    """Arena collisions!
       Ball must have a .vel field and a .pos field.
    """
    arena_collide(joker2)
    """Arena collisions!
       Ball must have a .vel field and a .pos field.
    """
    
    end_game()
    """ ends the game if you hit both alien in the goal"""
    
    
    
    # Geef de ball verticale snelheid als de bal de boef raakt
    if mag(ball.pos - boef.pos) < 1.0:
        print("Helaas, je hebt verloren en gaat naar de hemel!")
        ball.color = color.gray(.8)
        ball.vel = vector(0, 2, 0)
        
    # Geef de ball verticale snelheid als de bal de boef2 raakt 
    if mag(ball.pos - boef2.pos) < 1.0:
        print("Helaas, je hebt verloren en gaat naar de hemel!")
        ball.color = color.gray(.8)
        ball.vel = vector(0, 2, 0)

        
    # Laat de alien stijgen door de ringen heen als hij de goal raakt    
    if mag(alien.pos - goal_topl.pos) < 1.0:
        print("Goaaaaaalll!! Je hebt gescoord")
        alien.vel = vector(0, 1, 0)
        
        
        
    # Laat de alien2 stijgen door de ringen heen als hij de goal raakt    
    if mag(alien2.pos - goal_topl.pos) < 1.0:
        print("Goaaaaaalll!! Je hebt gescoord")
        alien2.vel = vector(0, 1, 0)
        
    
    # Laat de alien stijgen door de ringen heen als hij de goal raakt    
    if mag(alien.pos - goal_bottomr.pos) < 1.0:
        print("Goaaaaaalll!! Je hebt gescoord")
        alien.vel = vector(0, 1, 0)
        
        
        
    # Laat de alien2 stijgen door de ringen heen als hij de goal raakt    
    if mag(alien2.pos - goal_bottomr.pos) < 1.0:
        print("Goaaaaaalll!! Je hebt gescoord")
        alien2.vel = vector(0, 1, 0)
        
        
        
        
    # Draai de snelheid om als de bal of alien de joker raakt
    
    if mag(ball.pos - joker.pos) < 1.0:
        print("Kijk uit voor tegenliggers, anders krijg je een bult!")
        
        
    # Als beide aliens boven de 4 Y komen heb je gewonnen
    if alien.pos.y and alien2.pos.y > end_goal.pos.y:
        alien.pos.y = end_goal.pos.y
        print("You won the game, congrats")
        run = False
            
        answer = input("Thanks for playing you won the game!!!! Do you wanna continue? ")
           
        if answer != "yes" or "Yes": 
            print("Thanks for playing and have a good day. I hope i see you seen back")
            break
        else: 
            continue
            
           
  
    
    # +++ Einde van BOTSINGEN


# +++ Begin van het AFHANDELEN van EVENTS -- aparte functies voor
#                                          toetsaanslagen and muiskliks...



def keydown_fun(event):
    """This function is called each time a key is pressed."""
    alien.color = randcolor()
    alien2.color = randcolor()
    key = event.key
    ri = randint(0, 10)
    #print("toets:", key, ri)  # Drukt de ingedrukte toets af

    amt = 0.15              # Hoeveel de snelheid per toetsaanslag wordt aangepast
    if key == 'up' or key in 'wWiI':
        ball.vel = ball.vel + vector(0, 0, -amt)
    elif key == 'left' or key in 'aAjJ':
        ball.vel = ball.vel + vector(-amt, 0, 0)
    elif key == 'down' or key in 'sSkK':
        ball.vel = ball.vel + vector(0, 0, amt)
    elif key == 'right' or key in "dDlL":
        ball.vel = ball.vel + vector(amt, 0, 0)
    elif key in ' fF':
        ball.vel = ball.vel + ball.vel    # double the current speed of the ball
    elif key in "Bb" : 
        ball.make_trail=False
    elif key in "Nn" :
        ball.make_trail=True
    elif key in ' Cc': 
        ball.color = randcolor()      # geef de ball een random kleur
        ball.trail_color= randcolor()
          
    elif key in 'Pp':
        scene.exit
        
    elif key in ' rR':
        ball.vel = vector(0, 0, 0)  # Opnieuw beginne! via de spatiebalk, " "
        ball.pos = vector(0, 0, 0)
    
    

def click_fun(event):
    """This function is called each time the mouse is clicked."""
    print("Try to avoid the boef and hit the aliens, if you hit all the aliens in the hole you win. There are also jokers that interact with any ball. With W,A,S,D you can move your ball", event.event, event.which)
    #make_alien(starting_position=vector(-6, 0, 6), starting_vel=vector(0, 0, 2))

# +++ Einde van het AFHANDELEN van EVENTS

# +++ Andere functies kan je hier neerzetten...


def spheres_collide(sphere1, sphere2):
    """ takes two inputs, sphere1 and sphere2
        (1) checks for a collision (centers within distance of each other)
        (2) if colliding,
            (2a) undo the last time step's motion
            (2b) compute the new velocities of the two spheres
            (2c) assign those new velocities
        (3) returns True if they collided; False otherwise
        both sphere1 and sphere2 need a .pos field and a .vel field!
    """
    distance = 1.0  # afstand om botsingen te controleren
    s1 = sphere1
    s2 = sphere2  # makkelijker!
    # diff = de vector tussen de twee bollen
    diff = s1.pos - s2.pos  # vector tussen de twee
    if mag(diff) < distance:
        # vector loodrecht op de vector diff
        dtan = rotate(diff, radians(90), vector(0, 1, 0))
        # neem de twee snelheden
        vi = s1.vel
        vj = s2.vel
        # draai de laatste tijdstap terug
        s1.pos -= s1.vel * dt
        s2.pos -= s2.vel * dt
        # haal de lood- en raaklijnen op
        vi_rad = proj(vi, diff)
        vi_tan = proj(vi, dtan)
        vj_rad = proj(vj, -diff)
        vj_tan = proj(vj, dtan)
        # draai de loodlijnen om en bewaar de raaklijnen
        s1.vel = vj_rad + vi_tan
        s2.vel = vi_rad + vj_tan
        return True  # wel een botsing
    else:
        return False  # geen botsing


def wall_collide(w, obj):
    """ w is a wall
        obj is a moving object
        returns True (and reflects obj.vel) if it collides...
          + ALSO: runs obj.pos = obj.pos - obj.vel*dt to "undo" the collision
        returns False (w/o changing obj) if there's no collision
        all y components are ignored throughout!
    """
    b = obj  # heeft nu de naam b, maar moet obj zijn!!
    wpos_noy = vector(w.pos)
    wpos_noy.y = 0.0
    waxis_noy = vector(w.axis)
    waxis_noy.y = 0.0
    waxis_norm = norm(waxis_noy)
    wperp_norm = rotate(waxis_norm, radians(90), vector(0, 1, 0))
    bpos_noy = vector(b.pos)
    bpos_noy.y = 0.0
    bdiff_noy = bpos_noy - wpos_noy
    bvel_noy = vector(b.vel)
    bvel_noy.y = 0.0
    b_axial = dot(waxis_norm, bdiff_noy)
    b_perp = dot(wperp_norm, bdiff_noy)
    b_vel_axial = dot(waxis_norm, bvel_noy)
    b_vel_perp = dot(wperp_norm, bvel_noy)

    w_length = abs(w.size.x) / 2  # symmetrisch rond het midden
    w_height = abs(w.size.y) / 2  # genegeerd
    w_depth = abs(w.size.z) / 2  # symmetrisch rond het midden
    smallest_dim = max(0.1, min(w_length, w_depth))

    if mag(wpos_noy - bpos_noy) < smallest_dim or (-w_length < b_axial < w_length and -w_depth < b_perp < w_depth):
        # geraakt langs de as van w_length (axis) of...
        print("In rechthoek!")
        b.pos = b.pos - b.vel * dt  # laatste beweging ongedaan maken
        new_b_vel = b_vel_axial * waxis_norm - b_vel_perp * wperp_norm
        new_b_vel.y = b.vel.y  # de oude y-component van de snelheid herstellen...
        b.vel = new_b_vel
        return True
    else:
        return False



def choice(L):
    """Implements Python's choice using the random() function."""
    length = len(L)              # Haal de lengte op
    random_index = int(length * random())  # Kies een willekeurige index
    return L[random_index]       # Geef dat element terug


def randint(low, hi):
    """Implements Python's randint using the random() function.
       returns an int from low to hi _inclusive_ (so, it's not 100% Pythonic)
    """
    if hi < low:
        low, hi = hi, low                   # Draai ze om als ze verkeerd om staan!
    length = int(hi) - int(low) + 1.        # Bereken het verschil en voeg 1 toe
    rand_value = length * random() + int(low)  # Kies een willekeurige waarde
    return int(rand_value)                  # Geef het integergedeelte terug


def randcolor():
    """Returns a vector of (r, g, b) random from 0.0 to 1.0."""
    r = random(0.0, 1.0)
    g = random(0.0, 1.0)
    b = random(0.0, 1.0)
    return vector(r, g, b)  # Een kleur is een tuple met drie elementen
    
    
    
def arena_collide(ball):
    """Arena collisions!
       Ball must have a .vel field and a .pos field.
    """    
    # Als de bal wall_a raakt
    if ball.pos.z < wall_a.pos.z:  # Geraakt -- vergelijk de z-positie
        ball.pos.z = wall_a.pos.z  # Zorg dat de bal binnen de grenzen blijft
        ball.vel.z *= -1.0        # Draai de z-snelheid om

    # Als de ball wall_b raakt
    if ball.pos.x < wall_b.pos.x:  # Geraakt -- vergelijk de x-positie
        ball.pos.x = wall_b.pos.x  # Zorg dat de bal binnen de grenzen blijft
        ball.vel.x *= -1.0        # Draai de x-snelheid om

    # Als de ball wall_c raakt
    if ball.pos.x > wall_c.pos.x:
        ball.pos.x = wall_c.pos.x
        ball.vel.x *= -1.0

    # Als de ball wall_d raakt
    if ball.pos.z > wall_d.pos.z:
        ball.pos.z = wall_d.pos.z
        ball.vel.z *= -1.0
 
def end_game():
    """ ends the game if you hit both alien in the goal"""
    
    if alien.pos.y and alien2.pos.y > end_goal.pos.y:
        alien.pos.y = end_goal.pos.y
        print("You won the game, congrats")
        scene.quit 
